[
{
	"uri": "https://tibcosoftware.github.io/dovetail/introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": " Project Dovetail‚Ñ¢ is an Open Source application for blockchain smart contracts Developing blockchain solutions with today‚Äôs technology is challenging, given the lack of tooling and standardization. Project Dovetail‚Ñ¢ by TIBCO LABS‚Ñ¢ addresses these issues by providing a graphical interface for modeling smart contracts, making them easier to write, visualize, test, and audit, all without deep programming experience. Logic is abstracted from low-level code, and contracts can be deployed into different blockchain stacks with little or no change. On-chain and off-chain computation can become more seamless, time to market is improved, and the risk of technology lock-in is reduced. Project Dovetail makes your smart contracts smarter. \nWhat are Smart Contracts There are many definitions and descriptions of smart contracts, as each blockchain framework tends to implement this capability in its own way (if it does implement this feature at all). However, generally speaking, smart contracts (at least from an enterprise / permissioned perspective) may be thought of as application or business logic (defined in code) that runs within the context of a blockchain network itself. The idea is to automate the processing of blockchain transactions across the network, use the logic to determine if a transaction will get written to the ledger, and to maintain accuracy, compliance, and trust. In essence, smart contracts represent a method for controlling how changes are made to the underlying blockchain, in a non-centralized and (potentially) untrustworthy environment. Supply chain transaction tracking, healthcare revenue cycle management, consumer contract execution, and government interactions are all areas in which smart contracts (business logic) may be applied. Remember, however, that \u0026ldquo;smart contracts\u0026rdquo; are not necessarily \u0026ldquo;smart\u0026rdquo; (depends on the code) nor \u0026ldquo;contracts\u0026rdquo; (as they may not be viewed as legal contracts). Thus, the term can be a bit misleading :)\nProject Dovetail Project Dovetail‚Ñ¢ is a framework that allows for the end to end design, development, testing, and deployment of blockchain smart contracts. Project Dovetail‚Ñ¢ allows you to develop smart contracts based on a series of models, helping to:\n Increase security since the modeling abstraction layer will allow for reusable and tested code derived from the model. Simplify development via an extendable abstraction layer (flow model) Decouple your code from the underlying blockchain technology Reduce the amount of code needed Increase visibility and audit-ability Allow customizable modeling for your industry Expose a better UI for the design of smart contracts  Dovetail Core Dovetail is based on TIBCO FLOGO‚Ñ¢, an event-driven app framework used to develop apps for the cloud \u0026amp; IoT edge. It can also be thought of as a lightweight app kernel used by open source \u0026amp; commercial solutions like Dovetail here. The trigger used is based on the cli to generate or transpile your smart contract logic into blockchain technologies languages : R3 Corda, HyperLedger Fabric\u0026hellip;\nDovetail Core provides the following key benefits:\n‚õì Action chaining enables communication between one or more capabilities in a single, sub 10MB binary! üèó Common contribution model build activities and triggers that can be leveraged by all capabilities üî® Extensible easily extend the capabilities available by building your own action using the common interfaces\nDovetail Core Contribution Model Dovetail‚Ñ¢ Core exposes three principal contribution interfaces that enable developers to build common capabilities and functionality. These contribution interfaces include:\n Connector Interface a common interface for importing predefined schemas into Dovetail, Hyperledger Composer Connector is an example. Trigger Interface a common interface for building event-consumers that dispatch events to one or more actions. The Smart Contract TXN Trigger is an example of a trigger. Activity Interface a common interface for exposing common application logic in a reusable manner. Think of this as a function, such as write to ledger, publish events, etc that can be used by all Dovetail apps.  Repos Project Dovetail consists of the following sub-projects available as separate repos:\n dovetail-cli: Command line tools for building Dovetail apps \u0026amp; extensions dovetail-contrib: Dovetail contributions/extensions dovetail-java-lib: Dovetail java runtime for smart contract flows  Dovetail Flows Dovetail Flows provides smart contract logic design capabilities and includes the following key highlights.\nüåà Painless development Visual modeler with step-back debugging capabilities \u0026amp; elegant DSL ‚öôÔ∏è Ultra-light process engine for conditional flow control\nGetting Started We\u0026rsquo;ve made getting started with Dovetail Flows as easy as possible. The current set of tooling is designed for:\n Smart contract developers  For step by step instructions on how to get started please go to the documentation page\nZero-code Developers If your background is in or you prefer to develop your smart contracts using zero-coding environments, then read on, because we‚Äôve got something special for you.\nFlows Web UI is available via Dovetail releases page.\nTo report any issues with the Issue tracker on this project.\nDovetail Documentation Dovetail documentation can be found on the documentation page and the source code in the github page.\nIn order to regenerate the docs you need to run:\n\u0026gt; git clone https://github.com/TIBCOSoftware/dovetail \u0026gt; cd dovetail \u0026gt; docker build -t dovetail-docs . --build-arg git_user_email=\u0026lt;your git email\u0026gt; --build-arg git_user_name=\u0026lt;your git name\u0026gt; \u0026gt; docker run -it dovetail-docs   (Note that you will be asked to enter your github credentials and will need write access to the github repo)  Contributing Want to contribute to Project Dovetail? We\u0026rsquo;ve made it easy, all you need to do is fork the repository you intend to contribute to, make your changes and create a Pull Request! Once the pull request has been created, you\u0026rsquo;ll be prompted to sign the CLA (Contributor License Agreement) online.\nNot sure where to start? No problem, here are a few suggestions:\n dovetail-contrib: This repository contains all of the contributions, such as activities, triggers, etc. Perhaps there is something missing? Create a new activity or trigger or fix a bug in an existing activity or trigger. Browse all of the Project Dovetail repositories and look for issues tagged kind/help-wanted or good first issue  If you have any questions, feel free to post an issue and tag it as a question or email tibcolabs@tibco.com.\nFor additional details, refer to the Contribution Guidelines.\nLicense The top level flogo repo, consisting of flow samples \u0026amp; documentation, is licensed licensed under a BSD-style license. Refer to LICENSE for license text.\nDovetail source code in dovetail-cli, dovetail-contrib, dovetail-java-lib are all licensed under a BSD-style license, refer to LICENSE\n"
},
{
	"uri": "https://tibcosoftware.github.io/dovetail/getting-started/",
	"title": "Getting started",
	"tags": [],
	"description": "",
	"content": " Getting started Getting started with Project Dovetail‚Ñ¢!\n"
},
{
	"uri": "https://tibcosoftware.github.io/dovetail/getting-started/quickstart/",
	"title": "Quickstart",
	"tags": [],
	"description": "",
	"content": "We think it is awesome that you want to get started with Project Dovetail!\n  IOU smart contract! This lab will walk you through building your first smart contract with Project Dovetail‚Ñ¢     After you\u0026rsquo;re done with these samples, why not check out the other labs we have for you!\n"
},
{
	"uri": "https://tibcosoftware.github.io/dovetail/getting-started/getting-started-webui/",
	"title": "Dovetail Studio",
	"tags": [],
	"description": "",
	"content": " Installing the Project Dovetail Studio Installing the Project Dovetail Studio is quite simple just follow these steps:\n1.- Go to the releases page and download the latest version for your os architecture.\n2.- Unzip the downloaded release (for example on mac).\ncd /path/to/downloaded/file\nunzip TIB_dovetail_0.1.1_macosx_x86_64.zip\nStarting Dovetail Studio To get started with your downloaded version of the Dovetail Studio in the previous step just do the following:\n1.- Go to the bin directory on the unzipped folder\ncd /path/to/downloaded/file/dovetail/0.1/bin\n2.- Run studio\n./run-studio.sh eula-accept\nLaunching Dovetail Studio To launch Dovetail Studio simply open your favorite web browser, and navigate to http://localhost:8090. You\u0026rsquo;ll see the initial page to create your first smart contract!\nHyperledger Composer Project Dovetail‚Ñ¢ uses Hyperledger Composer Modeling Language to model assets, transactions and events, the resulted Business Network Archive(.bna) file is imported into Project Dovetail‚Ñ¢ Studio to create common json schemas.\nYou can use Visual Studio Code or Hyperledger Composer Playground for development\n Visual Studio Code Visual Studio Code Hyperledger Composer Plugin Hyperledger Composer Playground  After you\u0026rsquo;re done launching dovetail studio , why not check out the other labs we have for you!\n"
},
{
	"uri": "https://tibcosoftware.github.io/dovetail/getting-started/getting-started-cli/",
	"title": "Dovetail CLI",
	"tags": [],
	"description": "",
	"content": " Introduction The dovetail cli is a tool to mainly generate smart contracts for a given model built using ui tool Dovetail Studio, so we recommend you to learn how to do that first.\nBefore you get started Before you can get started with the cli tools you need to make sure you have the Go programming language and git installed. Go v1.11.x is required.\nDon\u0026rsquo;t forget to set your GOPATH variable and make sure that $GOPATH/bin is part of your path. (see here or here for more details)\n Installing the cli tools Follow these steps to install Project Dovetail‚Ñ¢ commandline tool, the binary dovetail will be in your $GOPATH/bin directory\nmkdir dovetail-cli export GOPATH=/path/to/new/dovetail-cli mkdir -p $GOPATH/src/github.com/TIBCOSoftware cd $GOPATH/src/github.com/TIBCOSoftware git clone https://github.com/TIBCOSoftware/dovetail-cli.git cd dovetail-cli GO111MODULE=on go install ./...  "
},
{
	"uri": "https://tibcosoftware.github.io/dovetail/labs/",
	"title": "Labs",
	"tags": [],
	"description": "",
	"content": " Labs After getting up and running you might want to try your hand at some more advanced labs and tutorials. These labs provide you with a guides, tutorials and code samples and will help you work through building and deploying Dovetail smart contracts.\nBlockchain‚Ñ¢ tutorials These labs have an emphasis on using external tools together with Project Dovetail‚Ñ¢, like R3 Corda or Hyperledger Fabric to build smart contracts\n TUTORIAL IOU smart contract application tutorial     "
},
{
	"uri": "https://tibcosoftware.github.io/dovetail/development/",
	"title": "Development",
	"tags": [],
	"description": "",
	"content": " Development All things Dovetail when it comes to building your smart contracts\n"
},
{
	"uri": "https://tibcosoftware.github.io/dovetail/development/devenv/",
	"title": "Environment Prerequisites",
	"tags": [],
	"description": "",
	"content": " Go Programming Language and Tools Project Dovetail‚Ñ¢ CLI is written in Go Programming Language, and it uses a few Go tools to package dependencies and resources\n Go version 1.11.x is required go-bindata govendor  Hyperledger Fabric SDK If you are developing for Hyperledger Fabric, below is a link to its installation instructions\n Hyperledger Fabric  Java Programming Language and Tools Project Dovetail‚Ñ¢ provides smart contract flow engine for distributed ledger platform that requires Java runtime, such as R3 Corda.\n Java SE Development Kit 8 and above is required Maven  If you are developing for R3 Corda, following jars must be available in your local or public Maven Repository.\n``` \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.jetbrains.kotlin\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;kotlin-stdlib-jre8\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.1.60\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;net.corda\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;corda-core\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;[2.0.0,)\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;net.corda\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;corda-finance\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;[2.0.0,)\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.tibco.dovetail\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;dovetail-corda\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;0.1.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; ```  *** com.tibco.dovetail:dovetail-corda:0.1.0 jar is available here\nDocker  Docker Docker Compose  "
},
{
	"uri": "https://tibcosoftware.github.io/dovetail/contributing/",
	"title": "Contribute",
	"tags": [],
	"description": "",
	"content": " Contribute Discover how you can contribute to Project Dovetail!\n"
},
{
	"uri": "https://tibcosoftware.github.io/dovetail/contributing/contributing/",
	"title": "Contributing to Project Dovetail",
	"tags": [],
	"description": "",
	"content": "Are you interested in contributing to Project Dovetail? If so, this doc was created specifically for you! If you‚Äôre not ready to start contributing code, no problem, feel free to check out the documentation issues and begin by helping enhance the documentation!\nIf you‚Äôre ready and interested to make code contributions, please contact tibcolabs@tibco.com.\n"
},
{
	"uri": "https://tibcosoftware.github.io/dovetail/readme/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " Dovetail documentation This documentation has been generated using hugo, which is available under the Apache License 2.0. You may obtail a copy of the license at http://apache.org/licenses/LICENSE-2.0.\n"
},
{
	"uri": "https://tibcosoftware.github.io/dovetail/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " Project Dovetail‚Ñ¢ Docs and Tutorials for project Dovetail‚Ñ¢\nGet started...  I\u0026#39;m an Business Developer!\n    I\u0026#39;m a Go Developer!\n    I need help!\n     As an Business Developer you might want to try...\n Our quickstart\n    Getting started with the UI\n    Check out some labs on Blockchain\n     As an Go Developer you might want to try...\n Development docs\n      If you have any questions, feel free to post an issue and tag it as a question, or email tibcolabs@tibco.com\n  function show(arg) { document.getElementById(\"app\").classList = \"line hidden\" document.getElementById(\"golang\").classList = \"line hidden\" document.getElementById(\"docs\").classList = \"line hidden\" document.getElementById(\"talk\").classList = \"line hidden\" document.getElementById(arg).classList.remove(\"hidden\") document.getElementById(arg).classList.add(\"block\") }  "
},
{
	"uri": "https://tibcosoftware.github.io/dovetail/labs/artifacts/composer-project-template/readme/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "This is a template project for Project Dovetail‚Ñ¢ asset modeling, it contains the required resource definitions in the system namespace.\n"
},
{
	"uri": "https://tibcosoftware.github.io/dovetail/labs/iou-smart-app/",
	"title": "A Simple IOU Smart Contract Tutorial",
	"tags": [],
	"description": "",
	"content": " In this tutorial, we will walk you through the steps to model, implement and test smart contracts on distributed ledger technology platform of your choice. The example is a simple \u0026ldquo;I owe you\u0026rdquo; use case, the issuer of an IOU is obligated to pay the owner of the IOU amount issued, the ownership of the IOU can be transferred by current owner, and all transactions will be recorded on the ledger.\nBefore getting started, you should have Project Dovetail‚Ñ¢ Studio and Project Dovetail‚Ñ¢ CLI installed, and your development environment setup.\n1. Model IOU Smart Contract 1.1 Introduction to smart contract modeling Project Dovetail‚Ñ¢ supports Hyperledger Composer modeling language to model smart contract assets and transactions, please refer to Composer Connector for support detail\n1.2 IOU Smart Contract We will use Visio Studio Code to create IOU smart contract model.\n create a workspace folder, e.g. tutorial create subfolders under tutorial  artifacts network  fabric corda   copy template project to the workspace, and rename the project as iou under folder iou/model, create a file iou.cto copy following resource definitions into iou.cto file  namespace com.example.iou import com.tibco.dovetail.system.* asset IOU identified by linearId extends LinearState { --\u0026gt; Party issuer --\u0026gt; Party owner o Amount amt } /* @InitiatedBy - arg0: comma delimited list of authorized participants in the format of $tx.path.to.participant, or * for any participant - arg1: optional, comma delimited list of required attributes that must exist in the initiator's certificate in the format of name=value. */ @InitiatedBy(\u0026quot;$tx.iou.issuer\u0026quot;) transaction IssueIOU { o IOU iou } @InitiatedBy(\u0026quot;$tx.iou.owner\u0026quot;) transaction TransferIOU { --\u0026gt; IOU iou //by reference because the asset is already on the ledger --\u0026gt; Party newOwner } /* @Query : mark transaction as query only */ @Query() transaction getIOU { o String linearId } @Query() transaction getIOUIssuedBy { o String issuerPartyId }   Run zip command from iou directory to package the iou project, it will create a iou.bna file in the tutorial folder   cd /path/to/iou\nzip -r ../iou.bna\n 2. Import IOU Smart Contract Model  Start up Project Dovetail‚Ñ¢ Studio, it will display web URL to use Go to a browser and open the Web Studio Go to Connections Tab \u0026gt; Add Connection \u0026gt; Select Composer Connector Give the connection a name, then \u0026ldquo;Browse\u0026rdquo; to find the iou.bna file, click \u0026ldquo;Save Model\u0026rdquo; button.  \n3. Implement IOU Smart Contract 3.1 IssueIOU Transaction  Go to Apps Tab \u0026gt; Create to create a new Application \u0026ldquo;IOU\u0026rdquo; Create a flow \u0026gt; flow name \u0026ldquo;IssueIOU\u0026rdquo; \u0026gt; Select \u0026ldquo;SmartContract TXN Trigger\u0026rdquo; \u0026gt; Select \u0026ldquo;IOU\u0026rdquo; from model dropdown \u0026gt; Select \u0026ldquo;com.example.iou.IssueIOU\u0026rdquo; from transaction dropdown \u0026gt; Click \u0026ldquo;Done\u0026rdquo; button We will add a logger activity, ledger activity and response activity. We will also validate input before writing to ledger.  \n3.2 TransferIOU Transaction  Create a new flow to implement TransferIOU transaction \n  3.3 getIOU Transaction  Create a new flow to implement getIOU transaction \n  3.4 getIOUIssuedBy Transaction  Create a new flow to implement getIOUIssuedBy transaction We use \u0026ldquo;Custom Query\u0026rdquo; activity to query the ledger. This activity is NOT blockchain agnostic  define a input parameter \u0026ldquo;issuerId\u0026rdquo; define blochchain specific query string, use _$paramName for input substitution, in this example, we use Hyperledger Fabric CouchDB query syntax *** During the mapping of transaction response, you will notice tht \u0026ldquo;array.\u0026rdquo; is underlined with a red line, it is a UI validation error because Project Dovetail‚Ñ¢ Studio UI does not support function yet, the error has no impact to runtime. Function will be supported in the very near future.   \n4. Export IOU Smart Contract Application  Go to IOU application Click on \u0026ldquo;Export app\u0026rdquo; button, save the file IOU.json to artifacts folder  5. Generate Blockchain Artifacts 5.1 Hyperledger Fabric Run following command from tutorial directory Hyperledger Fabric chaincode is written to tutorial/artifacts/hlf folder\nFor testing, transaction security support is not enabled.\n /path/to/dovetail-cli contract generate -b fabric -m artifacts/IOU.json -v 1.0.0 -t artifacts/\n 5.2 R3 Corda Run folloowing command from tutorial directory, R3 Corda contract is written to tutorial/artifacts/corda folder, put kotlin-IOU-1.0.0.jar on your classpath to develop your CorDapp. A sample IOUApp has been created and availble here\n /path/to/dovetail-cli contract generate -b corda -m artifacts/IOU.json -v 1.0.0 -t artifacts/ \u0026ndash;namespace com.example.iou\n 6. Test IOU Smart Contract 6.1 Hyperledger Fabric  Copy sample Hyperledger Fabric Network to your network/fabric directory Follow [instructions] here(https://github.com/TIBCOSoftware/dovetail/blob/master/docs/content/labs/fabric_network.md), assuing you are running commands from fabric directory.  6.2 R3 Corda  Copy sample R3 CorDapp to network/corda directory Follow [instructions] here(https://github.com/TIBCOSoftware/dovetail/blob/master/docs/content/labs/corda_network.md)  7. Import an existing application  You can import an application into Project Dovetail‚Ñ¢ Studio  Go to Project Dovetail‚Ñ¢ Studio If you haven\u0026rsquo;t import iou.bna file from Connections tab, you can do so now following step 2 in this document Create a new Application \u0026ldquo;IOUImport\u0026rdquo;, click on \u0026ldquo;Import\u0026rdquo; button, use this IOU.json   \n"
},
{
	"uri": "https://tibcosoftware.github.io/dovetail/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://tibcosoftware.github.io/dovetail/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]